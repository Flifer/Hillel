const URL="https://jsonplaceholder.typicode.com/",ALBUM_CLASS="album",ACTIVE_CLASS="active",IMAGE="album-image",albumsList=document.querySelector("#albumsList"),images=document.querySelector("#images");function start(){getAlbumList().then(t=>{renderAlbumList(t);getAlbum(getFirstAlbum(t)).then(renderPhotos);t=albumsList.querySelector(":first-child");bindActiveStyle(t)})}function onAlbumsListClick(t){t.preventDefault();const e=getTargetAlbum(t.target);t=getTargetAlbumId(e);const n=findActiveAlbum();e!=n&&n&&n!==e&&(n.classList.remove(ACTIVE_CLASS),e.classList.add(ACTIVE_CLASS),images.innerHTML="",getAlbum(t).then(renderPhotos))}function getAlbumList(){return fetch(URL+"albums").then(t=>{if(t.ok)return t.json();throw new Error("Can not get photos")}).catch(t=>{throw new Error("Can not execure request: "+t.message)})}function renderAlbumList(t){t=t.map(generateAlbumHtml).join("");albumsList.insertAdjacentHTML("beforeend",t)}function getFirstAlbum(t){return t[0].id}function getAlbum(t){return fetch(URL+"photos?albumId="+t).then(t=>{if(t.ok)return t.json();throw new Error("Can not get photos")}).catch(t=>{throw new Error("Can not execure request: "+t.message)})}function renderPhotos(t){t=t.map(generatePhotosHtml).join("");images.insertAdjacentHTML("beforeend",t)}function bindActiveStyle(t){t.classList.add(ACTIVE_CLASS)}function getTargetAlbum(t){return t.closest("."+ALBUM_CLASS)}function getTargetAlbumId(t){return t.dataset.id}function findActiveAlbum(){return albumsList.querySelector("."+ACTIVE_CLASS)}function generateAlbumHtml(t){return`
        <li data-id ="${t.id}" class = ${ALBUM_CLASS}>
            <span>${t.title}</span>
        </li>
    `}function generatePhotosHtml(t){return`
    <li>
        <img src="${t.url}" alt="img id = ${t.id}"  class = ${IMAGE}>
    </li>
    `}albumsList.addEventListener("click",onAlbumsListClick),start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJVUkwiLCJBTEJVTV9DTEFTUyIsIkFDVElWRV9DTEFTUyIsIklNQUdFIiwiYWxidW1zTGlzdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImltYWdlcyIsInN0YXJ0IiwiZ2V0QWxidW1MaXN0IiwidGhlbiIsInJlbmRlckFsYnVtTGlzdCIsImFsYnVtcyIsImdldEFsYnVtIiwiZ2V0Rmlyc3RBbGJ1bSIsInJlbmRlclBob3RvcyIsImZpcnN0QWxidW1FbCIsImJpbmRBY3RpdmVTdHlsZSIsIm9uQWxidW1zTGlzdENsaWNrIiwiZSIsInByZXZlbnREZWZhdWx0IiwidGFyZ2V0QWxidW0iLCJnZXRUYXJnZXRBbGJ1bSIsInRhcmdldCIsInRhcmdldEFsYnVtSWQiLCJnZXRUYXJnZXRBbGJ1bUlkIiwiYWN0aXZlQWxidW0iLCJmaW5kQWN0aXZlQWxidW0iLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJpbm5lckhUTUwiLCJmZXRjaCIsInJlcyIsIm9rIiwianNvbiIsIkVycm9yIiwiY2F0Y2giLCJtZXNzYWdlIiwibGlzdCIsImh0bWwiLCJtYXAiLCJnZW5lcmF0ZUFsYnVtSHRtbCIsImpvaW4iLCJpbnNlcnRBZGphY2VudEhUTUwiLCJpZCIsImdlbmVyYXRlUGhvdG9zSHRtbCIsImVsIiwiY2xvc2VzdCIsImRhdGFzZXQiLCJhbGJ1bSIsInRpdGxlIiwiaW1hZ2UiLCJ1cmwiLCJhZGRFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFBQSxJQUFBLHdDQUNBQyxZQUFBLFFBQ0FDLGFBQUEsU0FDQUMsTUFBQSxjQUVBQyxXQUFBQyxTQUFBQyxjQUFBLGFBQUEsRUFDQUMsT0FBQUYsU0FBQUMsY0FBQSxTQUFBLEVBTUEsU0FBQUUsUUFDQUMsYUFBQSxFQUFBQyxLQUFBLElBQ0FDLGdCQUFBQyxDQUFBLEVBRUFDLFNBREFDLGNBQUFGLENBQUEsQ0FDQSxFQUFBRixLQUFBSyxZQUFBLEVBQ0FDLEVBQUFaLFdBQUFFLGNBQUEsY0FBQSxFQUNBVyxnQkFBQUQsQ0FBQSxDQUNBLENBQUEsQ0FDQSxDQUVBLFNBQUFFLGtCQUFBQyxHQUNBQSxFQUFBQyxlQUFBLEVBRUEsTUFBQUMsRUFBQUMsZUFBQUgsRUFBQUksTUFBQSxFQUNBQyxFQUFBQyxpQkFBQUosQ0FBQSxFQUVBLE1BQUFLLEVBQUFDLGdCQUFBLEVBRUFOLEdBQUFLLEdBSUFBLEdBQUFBLElBQUFMLElBQ0FLLEVBQUFFLFVBQUFDLE9BQUEzQixZQUFBLEVBQ0FtQixFQUFBTyxVQUFBRSxJQUFBNUIsWUFBQSxFQUNBSyxPQUFBd0IsVUFBQSxHQUNBbEIsU0FBQVcsQ0FBQSxFQUFBZCxLQUFBSyxZQUFBLEVBR0EsQ0FFQSxTQUFBTixlQUNBLE9BQUF1QixNQUFBaEMsSUFBQSxRQUFBLEVBQ0FVLEtBQUF1QixJQUNBLEdBQUFBLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQUUsS0FBQSxFQUdBLE1BQUEsSUFBQUMsTUFBQSxvQkFBQSxDQUNBLENBQUEsRUFDQUMsTUFBQSxJQUNBLE1BQUEsSUFBQUQsTUFBQSw0QkFBQWpCLEVBQUFtQixPQUFBLENBQ0EsQ0FBQSxDQUNBLENBRUEsU0FBQTNCLGdCQUFBNEIsR0FDQUMsRUFBQUQsRUFBQUUsSUFBQUMsaUJBQUEsRUFBQUMsS0FBQSxFQUFBLEVBQ0F2QyxXQUFBd0MsbUJBQUEsWUFBQUosQ0FBQSxDQUNBLENBRUEsU0FBQTFCLGNBQUFGLEdBQ0EsT0FBQUEsRUFBQSxHQUFBaUMsRUFDQSxDQUVBLFNBQUFoQyxTQUFBZ0MsR0FDQSxPQUFBYixNQUFBaEMsSUFBQSxrQkFBQTZDLENBQUEsRUFDQW5DLEtBQUF1QixJQUNBLEdBQUFBLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQUUsS0FBQSxFQUdBLE1BQUEsSUFBQUMsTUFBQSxvQkFBQSxDQUNBLENBQUEsRUFDQUMsTUFBQSxJQUNBLE1BQUEsSUFBQUQsTUFBQSw0QkFBQWpCLEVBQUFtQixPQUFBLENBQ0EsQ0FBQSxDQUNBLENBRUEsU0FBQXZCLGFBQUF3QixHQUNBQyxFQUFBRCxFQUFBRSxJQUFBSyxrQkFBQSxFQUFBSCxLQUFBLEVBQUEsRUFDQXBDLE9BQUFxQyxtQkFBQSxZQUFBSixDQUFBLENBQ0EsQ0FFQSxTQUFBdkIsZ0JBQUE4QixHQUNBQSxFQUFBbkIsVUFBQUUsSUFBQTVCLFlBQUEsQ0FDQSxDQUVBLFNBQUFvQixlQUFBeUIsR0FDQSxPQUFBQSxFQUFBQyxRQUFBLElBQUEvQyxXQUFBLENBQ0EsQ0FFQSxTQUFBd0IsaUJBQUFzQixHQUNBLE9BQUFBLEVBQUFFLFFBQUFKLEVBQ0EsQ0FFQSxTQUFBbEIsa0JBQ0EsT0FBQXZCLFdBQUFFLGNBQUEsSUFBQUosWUFBQSxDQUNBLENBRUEsU0FBQXdDLGtCQUFBUSxHQUVBO3dCQUNBQSxFQUFBTCxlQUFBNUM7b0JBQ0FpRCxFQUFBQzs7S0FHQSxDQUVBLFNBQUFMLG1CQUFBTSxHQUNBOztvQkFFQUEsRUFBQUMsc0JBQUFELEVBQUFQLGdCQUFBMUM7O0tBR0EsQ0E1R0FDLFdBQUFrRCxpQkFBQSxRQUFBcEMsaUJBQUEsRUFFQVYsTUFBQSIsImZpbGUiOiJzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVUkwgPSAnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tLydcclxuY29uc3QgQUxCVU1fQ0xBU1MgPSAnYWxidW0nXHJcbmNvbnN0IEFDVElWRV9DTEFTUyA9ICdhY3RpdmUnXHJcbmNvbnN0IElNQUdFID0gJ2FsYnVtLWltYWdlJ1xyXG5cclxuY29uc3QgYWxidW1zTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhbGJ1bXNMaXN0JylcclxuY29uc3QgaW1hZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ltYWdlcycpXHJcblxyXG5hbGJ1bXNMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25BbGJ1bXNMaXN0Q2xpY2spXHJcblxyXG5zdGFydCgpXHJcblxyXG5mdW5jdGlvbiBzdGFydCgpIHtcclxuICAgIGdldEFsYnVtTGlzdCgpLnRoZW4oKGFsYnVtcykgPT4ge1xyXG4gICAgICAgIHJlbmRlckFsYnVtTGlzdChhbGJ1bXMpO1xyXG4gICAgICAgIGNvbnN0IGZpcnN0QWxidW0gPSBnZXRGaXJzdEFsYnVtKGFsYnVtcylcclxuICAgICAgICBnZXRBbGJ1bShmaXJzdEFsYnVtKS50aGVuKHJlbmRlclBob3Rvcyk7XHJcbiAgICAgICAgY29uc3QgZmlyc3RBbGJ1bUVsID0gYWxidW1zTGlzdC5xdWVyeVNlbGVjdG9yKCc6Zmlyc3QtY2hpbGQnKTtcclxuICAgICAgICBiaW5kQWN0aXZlU3R5bGUoZmlyc3RBbGJ1bUVsKTtcclxuICAgIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uQWxidW1zTGlzdENsaWNrKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBjb25zdCB0YXJnZXRBbGJ1bSA9IGdldFRhcmdldEFsYnVtKGUudGFyZ2V0KVxyXG4gICAgY29uc3QgdGFyZ2V0QWxidW1JZCA9IGdldFRhcmdldEFsYnVtSWQodGFyZ2V0QWxidW0pXHJcblxyXG4gICAgY29uc3QgYWN0aXZlQWxidW0gPSBmaW5kQWN0aXZlQWxidW0oKVxyXG5cclxuICAgIGlmICh0YXJnZXRBbGJ1bSA9PSBhY3RpdmVBbGJ1bSkgeyBcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICBpZiAoYWN0aXZlQWxidW0gJiYgYWN0aXZlQWxidW0gIT09IHRhcmdldEFsYnVtKSB7IFxyXG4gICAgICAgIGFjdGl2ZUFsYnVtLmNsYXNzTGlzdC5yZW1vdmUoQUNUSVZFX0NMQVNTKTtcclxuICAgICAgICB0YXJnZXRBbGJ1bS5jbGFzc0xpc3QuYWRkKEFDVElWRV9DTEFTUyk7XHJcbiAgICAgICAgaW1hZ2VzLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGdldEFsYnVtKHRhcmdldEFsYnVtSWQpLnRoZW4ocmVuZGVyUGhvdG9zKTtcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QWxidW1MaXN0KCkge1xyXG4gICAgcmV0dXJuIGZldGNoKFVSTCArICdhbGJ1bXMnKVxyXG4gICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGdldCBwaG90b3MnKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGUpID0+IHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbiBub3QgZXhlY3VyZSByZXF1ZXN0OiAke2UubWVzc2FnZX1gKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJBbGJ1bUxpc3QobGlzdCkge1xyXG4gICAgY29uc3QgaHRtbCA9IGxpc3QubWFwKGdlbmVyYXRlQWxidW1IdG1sKS5qb2luKCcnKTtcclxuICAgIGFsYnVtc0xpc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBodG1sKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Rmlyc3RBbGJ1bShhbGJ1bXMpIHtcclxuICAgIHJldHVybiBhbGJ1bXNbMF0uaWRcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QWxidW0oaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChVUkwgKyBgcGhvdG9zP2FsYnVtSWQ9JHtpZH1gKVxyXG4gICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGdldCBwaG90b3MnKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGUpID0+IHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbiBub3QgZXhlY3VyZSByZXF1ZXN0OiAke2UubWVzc2FnZX1gKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJQaG90b3MobGlzdCkge1xyXG4gICAgY29uc3QgaHRtbCA9IGxpc3QubWFwKGdlbmVyYXRlUGhvdG9zSHRtbCkuam9pbignJyk7XHJcbiAgICBpbWFnZXMuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBodG1sKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYmluZEFjdGl2ZVN0eWxlKGVsKSB7XHJcbiAgICBlbC5jbGFzc0xpc3QuYWRkKEFDVElWRV9DTEFTUylcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VGFyZ2V0QWxidW0oZWwpIHtcclxuICAgIHJldHVybiBlbC5jbG9zZXN0KGAuJHtBTEJVTV9DTEFTU31gKVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUYXJnZXRBbGJ1bUlkKGVsKSB7XHJcbiAgICByZXR1cm4gZWwuZGF0YXNldC5pZFxyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kQWN0aXZlQWxidW0oKSB7XHJcbiAgICByZXR1cm4gYWxidW1zTGlzdC5xdWVyeVNlbGVjdG9yKGAuJHtBQ1RJVkVfQ0xBU1N9YCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlQWxidW1IdG1sKGFsYnVtKSB7XHJcblxyXG4gICAgcmV0dXJuIGBcclxuICAgICAgICA8bGkgZGF0YS1pZCA9XCIke2FsYnVtLmlkfVwiIGNsYXNzID0gJHtBTEJVTV9DTEFTU30+XHJcbiAgICAgICAgICAgIDxzcGFuPiR7YWxidW0udGl0bGV9PC9zcGFuPlxyXG4gICAgICAgIDwvbGk+XHJcbiAgICBgO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVBob3Rvc0h0bWwoaW1hZ2UpIHtcclxuICAgIHJldHVybiBgXHJcbiAgICA8bGk+XHJcbiAgICAgICAgPGltZyBzcmM9XCIke2ltYWdlLnVybH1cIiBhbHQ9XCJpbWcgaWQgPSAke2ltYWdlLmlkfVwiICBjbGFzcyA9ICR7SU1BR0V9PlxyXG4gICAgPC9saT5cclxuICAgIGBcclxufSJdfQ==